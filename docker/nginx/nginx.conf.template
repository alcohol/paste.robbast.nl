# vim: set ts=2 sw=2 ft=nginx :

error_log /dev/stderr warn;

# Defines a file that will store the process ID of the main process.
pid /var/run/nginx.pid;

# Enables or disables the use of “just-in-time compilation” (PCRE JIT) for the
# regular expressions known by the time of configuration parsing.
#
# PCRE JIT can speed up processing of regular expressions significantly.
pcre_jit on;

# Defines the number of worker processes.
#
# The optimal value depends on many factors including (but not limited to) the
# number of CPU cores, the number of hard disk drives that store data, and load
# pattern. When one is in doubt, setting it to the number of available CPU cores
# would be a good start (the value “auto” will try to autodetect it).
worker_processes auto;

events {
  # Sets the maximum number of simultaneous connections that can be opened by a
  # worker process.
  #
  # It should be kept in mind that this number includes all connections
  # (e.g. connections with proxied servers, among others), not only connections
  # with clients. Another consideration is that the actual number of simultaneous
  # connections cannot exceed the current limit on the maximum number of open
  # files, which can be changed by worker_rlimit_nofile.
  worker_connections 2048;

  # If multi_accept is disabled, a worker process will accept one new connection
  # at a time. Otherwise, a worker process will accept all new connections at a time.
  multi_accept on;
}

http {
  include /etc/nginx/mime.types;
  default_type text/plain;

  server_tokens off;
  postpone_output 0;
  sendfile on;
  tcp_nopush on;
  aio on;
  directio 1m;

  gzip on;
  gzip_vary on;
  gzip_min_length 100;
  gzip_comp_level 6;
  gzip_http_version 1.1;
  gzip_proxied expired no-cache no-store private auth;
  gzip_types text/plain text/css text/xml text/javascript
    application/json application/x-javascript application/javascript
    application/xml application/xml+rss application/xhtml+xml application/rss+xml;

  log_format combined-log-format '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent"';

  log_format json-log-format escape=json '{'
    '"time_local":"$time_local",'
    '"time_iso8601":"$time_iso8601",'
    '"remote_addr":"$remote_addr",'
    '"remote_user":"$remote_user",'
    '"request":"$request",'
    '"status": "$status",'
    '"bytes_sent":"$bytes_sent",'
    '"body_bytes_sent":"$body_bytes_sent",'
    '"request_time":"$request_time",'
    '"request_length":"$request_length",'
    '"http_referrer":"$http_referer",'
    '"http_user_agent":"$http_user_agent"'
  '}';

  access_log /dev/stdout json-log-format;

  # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
  # scheme used to connect to this server
  map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    '' $scheme;
  }

  # If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
  # server port the client connected to
  map $http_x_forwarded_port $proxy_x_forwarded_port {
    default $http_x_forwarded_port;
    '' $server_port;
  }

  # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
  # Connection header that may have been passed to this server
  map $http_upgrade $proxy_connection {
    default upgrade;
    '' close;
  }

  # Apply fix for very long server names
  server_names_hash_bucket_size 128;

  # Set appropriate X-Forwarded-Ssl header
  map $scheme $proxy_x_forwarded_ssl {
    default off;
    https on;
  }

  real_ip_header X-Forwarded-For;

  # HTTP 1.1 support
  proxy_http_version 1.1;
  proxy_buffering off;
  proxy_set_header Host $http_host;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection $proxy_connection;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
  proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
  proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
  proxy_set_header X-Nginx-Proxy true;

  # mitigate httpoxy attack
  proxy_set_header Proxy "";

  # Defines a timeout for reading client request body. The timeout is set only for a period between two successive
  # read operations, not for the transmission of the whole request body. If a client does not transmit anything within
  # this time, the 408 (Request Time-out) error is returned to the client.
  client_body_timeout ${CLIENT_BODY_TIMEOUT};

  # Defines a timeout for reading client request header. If a client does not transmit the entire header within
  # this time, the 408 (Request Time-out) error is returned to the client.
  client_header_timeout ${CLIENT_HEADER_TIMEOUT};

  # The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side.
  # The zero value disables keep-alive client connections. The optional second parameter sets a value in the
  # “Keep-Alive: timeout=time” response header field. Two parameters may differ.
  #
  # The “Keep-Alive: timeout=time” header field is recognized by Mozilla and Konqueror. MSIE closes keep-alive
  # connections by itself in about 60 seconds.
  keepalive_timeout ${KEEPALIVE_TIMEOUT};

  # Sets a timeout for transmitting a response to the client. The timeout is set only between two successive write
  # operations, not for the transmission of the whole response. If the client does not receive anything within this
  # time, the connection is closed.
  send_timeout ${SEND_TIMEOUT};

  # Sets a timeout for name resolution.
  resolver_timeout ${RESOLVER_TIMEOUT};

  # Additional configuration files.
  include /etc/nginx/conf.d/*.conf;
}
